<html>

<head>
</head>

<body>
    <form id="myForm">
        Bubble Name: <input type="text" name="bubname" />
        <input type="submit" value="Submit" />
    </form>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.js"></script>
    <script src="http://malsup.github.com/jquery.form.js"></script>

    <script>
        // prepare the form when the DOM is ready 
        $(document).ready(function () {
            var options = {
                //target: '#output2',   // target element(s) to be updated with server response 
                beforeSubmit: showRequest,  // pre-submit callback 
                success: showResponse,      // post-submit callback
                //url: "http://brewbubbles.local/apply/",
                type: "POST"

                // other available options: 
                //url:       url         // override for form's 'action' attribute 
                //type:      type        // 'get' or 'post', override for form's 'method' attribute 
                //dataType:  null        // 'xml', 'script', or 'json' (expected server response type) 
                //clearForm: true        // clear all form fields after successful submit 
                //resetForm: true        // reset the form after successful submit 

                // $.ajax options can be used here too, for example: 
                //timeout:   3000 
            };

            // bind to the form's submit event 
            $('#myForm').submit(function () {

                // Use: this.$form ???

                // Convert form to JSON
                var $form = $("#myForm");
                var data = getFormData($form);
                console.log(data);

                // POST JSON
                $.ajax({
                    url: '/post/',
                    type: "POST",
                    data: data,
                    contentType: 'application/x-www-form-urlencoded;charset=UTF-8'
                })

                // inside event callbacks 'this' is the DOM element so we first 
                // wrap it in a jQuery object and then invoke ajaxSubmit 
                // $(this).ajaxSubmit(options);

                alert("submit()");

                // !!! Important !!! 
                // always return false to prevent standard browser submit and page navigation 
                return false;
            });
        });

        // pre-submit callback 
        function showRequest(formData, jqForm, options) {
            // formData is an array; here we use $.param to convert it to a string to display it 
            // but the form plugin does this for you automatically when it submits the data 
            var queryString = $.param(formData);

            // jqForm is a jQuery object encapsulating the form element.  To access the 
            // DOM element for the form do this: 
            // var formElement = jqForm[0]; 

            alert('showRequest(): About to submit: \n\n' + queryString);

            // here we could return false to prevent the form from being submitted; 
            // returning anything other than false will allow the form submit to continue 
            return true;
        }

        // post-submit callback 
        function showResponse(responseText, statusText, xhr, $form) {
            // for normal html responses, the first argument to the success callback
            // is the XMLHttpRequest object's responseText property

            // if the ajaxSubmit method was passed an Options Object with the dataType
            // property set to 'xml' then the first argument to the success callback
            // is the XMLHttpRequest object's responseXML property

            // if the ajaxSubmit method was passed an Options Object with the dataType
            // property set to 'json' then the first argument to the success callback
            // is the json data object returned by the server

            alert("showResponse()");

            alert('status: ' + statusText + '\n\nresponseText: \n' + responseText +
                '\n\nThe output div should have already been updated with the responseText.');
        }

        function getFormData($form) {
            var unindexed_array = $form.serializeArray();
            var indexed_array = {};

            $.map(unindexed_array, function (n, i) {
                indexed_array[n['name']] = n['value'];
            });

            return indexed_array;
        }

    </script>

</body>